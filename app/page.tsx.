"use client";

import { useEffect, useMemo, useRef, useState } from "react";

const WS_URL = process.env.NEXT_PUBLIC_WS_URL || "ws://localhost:8000/ws";

// Simple viseme mapping (you can refine later)
const VIS_MAP: Record<string, string> = {
  a: "A",
  e: "E",
  i: "I",
  o: "O",
  u: "U",
  m: "M",
  f: "F",
  l: "L",
  s: "S",
  x: "X",
};

function pickVisemeFromText(chunk: string) {
  const t = chunk.toLowerCase();
  for (const [k, v] of Object.entries(VIS_MAP)) {
    if (t.includes(k)) return v;
  }
  return "X"; // default/closed
}

export default function Page() {
  const [status, setStatus] = useState<"connected"|"disconnected"|"error">("disconnected");
  const [log, setLog] = useState<string[]>([]);
  const [mouth, setMouth] = useState<string>("X");
  const [scale, setScale] = useState(1);
  const [rotate, setRotate] = useState(0);
  const wsRef = useRef<WebSocket | null>(null);
  const [input, setInput] = useState("Hi, I’m Emma. How can I help you?");

  // Connect WebSocket on mount
  useEffect(() => {
    const ws = new WebSocket(WS_URL);
    wsRef.current = ws;
    ws.onopen = () => setStatus("connected");
    ws.onclose = () => setStatus("disconnected");
    ws.onerror = () => setStatus("error");
    ws.onmessage = (ev) => {
      try {
        const msg = JSON.parse(ev.data);
        if (msg.type === "assistant" && typeof msg.text === "string") {
          // naive viseme pick from text chunk
          const v = pickVisemeFromText(msg.text);
          setMouth(v);
          setLog((l) => [...l, msg.text]);
        }
        if (msg.type === "done") {
          // close mouth after a beat
          setTimeout(() => setMouth("X"), 120);
        }
      } catch {}
    };
    return () => ws.close();
  }, []);

  const mouthSrc = useMemo(() => `/mouths/${mouth}.png`, [mouth]);

  const send = () => {
    if (!wsRef.current || wsRef.current.readyState !== 1) return;
    setLog([]);
    wsRef.current.send(JSON.stringify({ type: "user", text: input }));
  };

  return (
    <main style={{ padding: 20, fontFamily: "ui-sans-serif, system-ui" }}>
      <h1>EKP Emma — Live Avatar (Next.js)</h1>
      <p>WebSocket: <b>{status}</b> → {WS_URL}</p>

      <div style={{ display: "flex", gap: 24, alignItems: "flex-start", flexWrap: "wrap" }}>
        {/* Avatar */}
        <div style={{ position: "relative", width: 320, userSelect: "none" }}>
          <img
            src="/emma_base.png"
            alt="Emma"
            style={{
              width: "100%",
              transform: `scale(${scale}) rotate(${rotate}deg)`,
              transformOrigin: "50% 60%",
              transition: "transform 120ms linear",
              borderRadius: 16,
              boxShadow: "0 8px 28px rgba(0,0,0,.12)",
            }}
          />
          {/* Mouth overlay */}
          <img
            src={mouthSrc}
            alt={mouth}
            style={{
              position: "absolute",
              left: "50%",
              top: "63%",
              width: "22%",
              transform: `translate(-50%, -50%)`,
              transition: "opacity 60ms linear",
              pointerEvents: "none",
            }}
            onError={(e) => ((e.currentTarget as HTMLImageElement).style.opacity = "0")}
            onLoad={(e) => ((e.currentTarget as HTMLImageElement).style.opacity = "1")}
          />
        </div>

        {/* Controls */}
        <div style={{ minWidth: 320, maxWidth: 560 }}>
          <label style={{ display: "block", fontWeight: 600, marginBottom: 6 }}>Message to Emma</label>
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            rows={3}
            style={{ width: "100%", padding: 10, borderRadius: 8, border: "1px solid #ddd" }}
          />
          <div style={{ display: "flex", gap: 12, marginTop: 10 }}>
            <button
              onClick={send}
              disabled={status !== "connected"}
              style={{ padding: "10px 14px", borderRadius: 10, border: "1px solid #111", background: "#111", color: "#fff" }}
            >
              Send to Server
            </button>
            <button
              onClick={() => setMouth("X")}
              style={{ padding: "10px 14px", borderRadius: 10, border: "1px solid #ccc", background: "#fff" }}
            >
              Reset Mouth
            </button>
          </div>

          <div style={{ marginTop: 18 }}>
            <label>Scale: {scale.toFixed(2)}</label>
            <input
              type="range" min="0.6" max="1.6" step="0.02"
              value={scale} onChange={(e) => setScale(parseFloat(e.target.value))}
              style={{ width: "100%" }}
            />
            <label>Rotate: {rotate.toFixed(1)}°</label>
            <input
              type="range" min="-10" max="10" step="0.2"
              value={rotate} onChange={(e) => setRotate(parseFloat(e.target.value))}
              style={{ width: "100%" }}
            />
          </div>

          <div style={{ marginTop: 18 }}>
            <div style={{ fontWeight: 600, marginBottom: 8 }}>Incoming stream (for debugging):</div>
            <div style={{ whiteSpace: "pre-wrap", background: "#fafafa", border: "1px solid #eee", padding: 10, borderRadius: 8, minHeight: 80 }}>
              {log.join("") || "—"}
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
